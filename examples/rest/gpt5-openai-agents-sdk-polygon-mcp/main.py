import os
from agents import Agent, InputGuardrail, GuardrailFunctionOutput, Runner, SQLiteSession, AsyncOpenAI, trace, function_tool, ModelSettings
from agents.exceptions import InputGuardrailTripwireTriggered
from agents.models.openai_responses import OpenAIResponsesModel
from agents.mcp import MCPServerStdio
from pydantic import BaseModel
import asyncio
from dotenv import load_dotenv
from rich.console import Console
from rich.markdown import Markdown
from datetime import datetime
from pathlib import Path
import re

load_dotenv()

console = Console()

# Models
class FinanceOutput(BaseModel):
    is_about_finance: bool
    reasoning: str


@function_tool
async def save_analysis_report(content: str, title: str = None, category: str = "general") -> str:
    """Save analysis reports for later reference."""
    reports_dir = Path("reports") / category
    reports_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    title = title or f"analysis_{timestamp}"
    safe_title = re.sub(r'[^\w\s-]', '', title).replace(' ', '_')
    filepath = reports_dir / f"{timestamp}_{safe_title}.md"
    
    content = f"""# {title}

**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Category:** {category}

---

{content}

---
*Report generated by Market Analysis Agent*
"""
    
    filepath.write_text(content, encoding='utf-8')
    return f"Report saved: {filepath}"

guardrail_agent = Agent(
    name="Guardrail check",
    instructions="Confirm the user's question is about finance.",
    output_type=FinanceOutput,
)

async def finance_guardrail(context, agent, input_data):
    result = await Runner.run(guardrail_agent, input_data, context=context)
    final_output = result.final_output_as(FinanceOutput)
    return GuardrailFunctionOutput(
        output_info=final_output,
        tripwire_triggered=not final_output.is_about_finance,
    )

def create_polygon_mcp_server():
    api_key = os.getenv("POLYGON_API_KEY")
    if not api_key:
        raise Exception("POLYGON_API_KEY not set in environment.")
    return MCPServerStdio(params={
        "command": "uvx",
        "args": ["--from", "git+https://github.com/polygon-io/mcp_polygon@v0.4.0", "mcp_polygon"],
        "env": {**os.environ, "POLYGON_API_KEY": api_key}
    })

# Output functions
def print_response(output):
    console.print("\n[bold green]✔ Query processed successfully![/bold green]")
    console.print("[bold]Agent Response:[/bold]")
    console.print(Markdown(str(output)) if any(tag in str(output) for tag in ["#", "*", "`", "-", ">"]) else str(output).strip())
    console.print("---------------------\n")

def print_error(error, error_type="Error"):
    console.print(f"\n[bold red]!!! {error_type} !!![/bold red]")
    console.print(str(error).strip())
    console.print("------------------\n")

def print_guardrail_error(exception):
    console.print("\n[bold yellow]⚠ Guardrail Triggered[/bold yellow]")
    console.print("[yellow]This query is not related to finance.[/yellow]")
    if hasattr(exception, 'output_info') and exception.output_info:
        console.print(f"[dim]Reasoning: {exception.output_info.reasoning}[/dim]")
    console.print("[dim]Please ask about stock prices, market data, financial analysis, economic indicators, or company financials.[/dim]")
    console.print("------------------\n")

# Main CLI
async def cli_async():
    print("Welcome to the Market Parser CLI. Type 'exit' to quit.")
    
    try:
        session = SQLiteSession("finance_conversation")
        server = create_polygon_mcp_server() 
        
        async with server:
            while True:
                try:
                    user_input = input('> ').strip()
                    if user_input.lower() == 'exit':
                        print("Goodbye!")
                        break
                    
                    if not user_input or len(user_input.strip()) < 2:
                        print("Please enter a valid query (at least 2 characters).")
                        continue
                    
                    with trace("Polygon.io Finance Agent"):
                        try:
                            analysis_agent = Agent(
                                name="Generic Financial Analysis Agent",
                                instructions=(
                                    "Financial analysis agent. Steps:\n"
                                    "1. Verify finance-related using guardrail\n"
                                    "2. Gather market data with Polygon.io tools\n"
                                    "3. Include disclaimers.\n"
                                    "4. Offer to save reports if not asked by the user to save a report.\n\n"
                                    "RULES:\n"
                                    "Always double check math.\n" 
                                    "When using any news tools, pull NO MORE THAN 3 articles per ticker based on the users input date range.\n"
                                    "If the user asks to save a report, save it to the reports folder using the save_analysis_report tool.\n"
                                    "When using any polygon.io data tools, be mindful of how much data you pull based on the users input to minimize context being exceeded.\n"
                                    "TOOLS:\n" 
                                    "Polygon.io data, save_analysis_report\n"
                                    "Disclaimer: Not financial advice. For informational purposes only."
                                ),
                                mcp_servers=[server],
                                tools=[save_analysis_report],
                                input_guardrails=[InputGuardrail(guardrail_function=finance_guardrail)],
                                model=OpenAIResponsesModel(model="gpt-5", openai_client=AsyncOpenAI()),
                                model_settings = ModelSettings(truncation="auto")
                            )
                            output = await Runner.run(analysis_agent, user_input, session=session)
                            print("\r", end="")
                            print_response(output)
                        except InputGuardrailTripwireTriggered as e:
                            print("\r", end="")
                            print_guardrail_error(e)
                        except Exception as e:
                            print("\r", end="")
                            print_error(e, "Agent Error")
                            
                except (EOFError, KeyboardInterrupt):
                    print("\nGoodbye!")
                    break
                except Exception as e:
                    print_error(e, "Unexpected Error")
                    
    except Exception as e:
        print_error(e, "Setup Error")
    finally:
        print("Market Analysis Agent shutdown complete")

if __name__ == "__main__":
    asyncio.run(cli_async()) 