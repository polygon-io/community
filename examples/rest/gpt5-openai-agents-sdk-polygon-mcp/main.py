"""CLI financial analyst using OpenAI Agents SDK, GPT-5, and Polygon.io MCP server.

This script launches a stdio MCP server for Polygon.io tools, runs a single
analysis agent with an input guardrail to ensure finance-related prompts, and
renders only the agent's final output. Users can optionally save analyses as
Markdown reports in the `reports/` directory.
"""

import os
from agents import Agent, InputGuardrail, GuardrailFunctionOutput, Runner, SQLiteSession, AsyncOpenAI, trace, function_tool, ModelSettings
from agents.exceptions import InputGuardrailTripwireTriggered
from agents.models.openai_responses import OpenAIResponsesModel
from agents.mcp import MCPServerStdio
from pydantic import BaseModel
import asyncio
from dotenv import load_dotenv
from rich.console import Console
from rich.markdown import Markdown
from datetime import datetime
from pathlib import Path
import re

load_dotenv()

console = Console()

# Models
class FinanceOutput(BaseModel):
    """Structured result from the guardrail check.
    """
    is_about_finance: bool
    reasoning: str

@function_tool
async def save_analysis_report(content: str, title: str = None, category: str = "general") -> str:
    """Persist a Markdown report to `reports/<timestamp>_<title>.md`.
    """
    reports_dir = Path("reports")
    reports_dir.mkdir(parents=True, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    title = title or f"analysis_{timestamp}"
    safe_title = re.sub(r'[^\w\s-]', '', title).replace(' ', '_')
    filepath = reports_dir / f"{timestamp}_{safe_title}.md"
    
    content = f"""# {title}

**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Category:** {category}

---

{content}

---
*Report generated by Market Analysis Agent*
"""
    
    filepath.write_text(content, encoding='utf-8')
    return f"Report saved: {filepath}"

guardrail_agent = Agent(
    name="Guardrail check",
    instructions=
    """Classify if the user query is finance-related.
    Include: stocks, ETFs, crypto, forex, market news, fundamentals, economic indicators, ROI calcs, corporate actions.
    Exclude: non-financial topics (cooking, general trivia, unrelated tech).
    Disambiguate: if term (e.g., Apple, Tesla) could be both, check for finance context words (price, market, earnings, shares). If unclear, return non-finance.
    Output: is_about_finance: bool, reasoning: brief why/why not.""",
    output_type=FinanceOutput,
)

async def finance_guardrail(context, agent, input_data):
    """Validate that the prompt is finance-related before running the agent.
    """
    result = await Runner.run(guardrail_agent, input_data, context=context)
    final_output = result.final_output_as(FinanceOutput)
    return GuardrailFunctionOutput(
        output_info=final_output,
        tripwire_triggered=not final_output.is_about_finance,
    )

def create_polygon_mcp_server():
    """Create a stdio MCP server instance configured with POLYGON_API_KEY.
    """
    api_key = os.getenv("POLYGON_API_KEY")
    if not api_key:
        raise Exception("POLYGON_API_KEY not set in environment.")
    return MCPServerStdio(params={
        "command": "uvx",
        "args": ["--from", "git+https://github.com/polygon-io/mcp_polygon@v0.4.0", "mcp_polygon"],
        "env": {**os.environ, "POLYGON_API_KEY": api_key}
    })

# Output functions
def print_response(result):
    """Render only the agent's final output with basic Markdown support."""
    console.print("\n[bold green]✔ Query processed successfully![/bold green]")
    console.print("[bold]Agent Response:[/bold]")
    # Print only the final output from the run result (per OpenAI Agents SDK)
    final_output = getattr(result, "final_output", result)
    final_text = str(final_output)
    console.print(Markdown(final_text) if any(tag in final_text for tag in ["#", "*", "`", "-", ">"]) else final_text.strip())
    console.print("---------------------\n")

def print_error(error, error_type="Error"):
    """Display errors in a consistent, readable format for the CLI."""
    console.print(f"\n[bold red]!!! {error_type} !!![/bold red]")
    console.print(str(error).strip())
    console.print("------------------\n")

def print_guardrail_error(exception):
    """Explain why a prompt was blocked by the finance guardrail."""
    console.print("\n[bold yellow]⚠ Guardrail Triggered[/bold yellow]")
    console.print("[yellow]This query is not related to finance.[/yellow]")
    if hasattr(exception, 'output_info') and exception.output_info:
        console.print(f"[dim]Reasoning: {exception.output_info.reasoning}[/dim]")
    console.print("[dim]Please ask about stock prices, market data, financial analysis, economic indicators, or company financials.[/dim]")
    console.print("------------------\n")

# Main CLI
async def cli_async():
    """Run the interactive CLI loop.
    """
    print("Welcome to the GPT-5 powered Market Analysis Agent. Type 'exit' to quit.")
    
    try:
        session = SQLiteSession("finance_conversation")
        server = create_polygon_mcp_server() 
        
        async with server:
            while True:
                try:
                    user_input = input('> ').strip()
                    if user_input.lower() == 'exit':
                        print("Goodbye!")
                        break
                    
                    if not user_input or len(user_input.strip()) < 2:
                        print("Please enter a valid query (at least 2 characters).")
                        continue
                    
                    with trace("Polygon.io Demo"):
                        try:
                            analysis_agent = Agent(
                                name="Financial Analysis Agent",
                                instructions=(
                                    "Financial analysis agent. Steps:\n"
                                    "1. Verify finance-related using guardrail\n"
                                    "2. Call Polygon tools precisely; pull the minimal required data.\n"
                                    "3. Include disclaimers.\n"
                                    "4. Offer to save reports if not asked by the user to save a report.\n\n"
                                    "RULES:\n"
                                    "Double-check math; limit news to ≤3 articles/ticker in date range.\n" 
                                    "If the user asks to save a report, save it to the reports folder using the save_analysis_report tool.\n"
                                    "When using any polygon.io data tools, be mindful of how much data you pull based \n"
                                    "on the users input to minimize context being exceeded.\n"
                                    "If data unavailable or tool fails, explain gracefully — never fabricate.\n"
                                    "TOOLS:\n" 
                                    "Polygon.io data, save_analysis_report\n"
                                    "Disclaimer: Not financial advice. For informational purposes only."
                                ),
                                mcp_servers=[server],
                                tools=[save_analysis_report],
                                input_guardrails=[InputGuardrail(guardrail_function=finance_guardrail)],
                                model=OpenAIResponsesModel(model="gpt-5", openai_client=AsyncOpenAI()),
                                model_settings = ModelSettings(truncation="auto")
                            )
                            output = await Runner.run(analysis_agent, user_input, session=session)
                            print("\r", end="")
                            print_response(output)
                        except InputGuardrailTripwireTriggered as e:
                            print("\r", end="")
                            print_guardrail_error(e)
                        except Exception as e:
                            print("\r", end="")
                            print_error(e, "Agent Error")
                            
                except (EOFError, KeyboardInterrupt):
                    print("\nGoodbye!")
                    break
                except Exception as e:
                    print_error(e, "Unexpected Error")
                    
    except Exception as e:
        print_error(e, "Setup Error")
    finally:
        print("Market Analysis Agent shutdown complete")

if __name__ == "__main__":
    asyncio.run(cli_async()) 